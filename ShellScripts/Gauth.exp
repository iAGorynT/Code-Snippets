#!/usr/bin/env expect
# This script automates the authentication process for gauth and copies current code to clipboard

# Set timeout for expect commands (in seconds)
set timeout 10

# Error handling procedure
proc handle_error {message} {
    puts stderr "Error: $message"
    exit 1
}

# Signal handling procedure
proc cleanup {} {
    puts stderr "\nScript interrupted"
    exit 2
}

# Setup proper signal handling in Tcl/Expect
trap {cleanup} SIGINT
trap {cleanup} SIGTERM

# Get required environment variables
if {![info exists env(GAUTH_PASSWORD)]} {
    handle_error "GAUTH_PASSWORD environment variable not set"
}
set pw $env(GAUTH_PASSWORD)

if {![info exists env(GAUTH_KEY)]} {
    handle_error "GAUTH_KEY environment variable not set"
}
set rkey $env(GAUTH_KEY)

# Main authentication process
log_user 0  # Suppress echoing of sensitive information

# Start the gauth process
if {[catch {spawn gauth $rkey} err]} {
    handle_error "Failed to start gauth: $err"
}

# Handle password prompt
expect {
    "Encryption password: " {
        send "$pw\r"
    }
    timeout {
        handle_error "Timeout waiting for password prompt"
    }
    eof {
        handle_error "gauth process ended unexpectedly"
    }
}

# Wait for and capture the code display with improved regex
expect {
    -re {([0-9]{6})\s+\*?([0-9]{6})\*?\s+([0-9]{6})} {
        # Extract the current (middle) code and copy to clipboard
        set current_code $expect_out(2,string)
        
        # Use catch to handle clipboard operation failures
        if {[catch {exec echo $current_code | pbcopy} result]} {
            handle_error "Failed to copy to clipboard: $result"
        }
        
        # Re-enable user output to show the result
        log_user 1
        puts "\nCurrent code ($current_code) copied to clipboard!"
        exit 0
    }
    timeout {
        handle_error "Timeout waiting for authentication codes"
    }
    eof {
        handle_error "gauth process ended unexpectedly before showing codes"
    }
}
